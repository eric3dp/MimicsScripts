Getting started with the 3-matic API 
====================================

Introduction
------------

Python is a very powerful programming language and can be used in many ways. 
If you have never used Python before, we recommend following an online tutorial.
The following section explains the way the Python API in 3-matic is built up.
We will refer to the Python API in 3-matic as trimatic API, or simply API.

To use 3-matic features with Python, you use the trimatic API.
A simple script that creates a point in 3-matic looks like this:

.. code-block:: python
	
	#import trimatic package
	import trimatic
	#create a point with coordinates 1,2,3
	trimatic.create_point((1,2,3))
	
The trimatic Python package was implemented such that a single import statement is sufficient to make all functions available.
For example, create_point() will be available as 

.. code-block:: python

	trimatic.create_point()

Alternatively, you can equally use:

.. code-block:: python
	
	trimatic.analyze.create_point((1,2,3))

You can choose whichever way of working you prefer.


Functions and classes
---------------------

The trimatic API contains mostly functions that make it possible to script 3-matic features.
We refer to these functions as API functions. 
Next to the API functions, the API contains classes that are used for the 3-matic data types.
Those classes have member functions and attributes. For example, in this statement:

.. code-block:: python
	
	mypoint = trimatic.create_point((1,2,3))

The function trimatic.create_point() will create an object of class trimatic.Point and assign it to variable "mypoint". 
The coordinates of the point can be obtained from the "coordinates" attribute. For example, the coordinates of a point can be printed with:

.. code-block:: python
	
	print(mypoint.coordinates)

.. _finding_objects:	


Finding an object in 3-matic
----------------------------

Many API functions are implemented to return an object type.
There are 3 different types of search functions available, depending on the specific needs:

* Functions to find an object with a specific name.  For example:

.. code-block:: python

	trimatic.find_point(name = "Point 1")
	
* Functions to find objects with names that match a specified regular expression. For full reference, have a look at https://en.wikipedia.org/wiki/Regular_expression. For example:

.. code-block:: python

	trimatic.find_points(regex = "Point.*")
	# "Point.*" will find all objects that start with ‘Point’
	# ".*Point.*" will find all objects that have ‘Point’ in their name

* Functions to get all objects of a specific type. For example:

.. code-block:: python

	trimatic.get_points()

	
API functions that take single or more entities
-----------------------------------------------

Many API functions can work on one or more entities. 
In such a case, you can either pass a single entity or any container type containing the entities. 
For example, all of these statements will work:

.. code-block:: python

	trimatic.duplicate(box) #single entity
	trimatic.duplicate([box, cone]) #list of entities
	trimatic.duplicate((box, cone)) #tuple of entities

Note: For purposes of brevity, the documentation for specific API functions will not always exhaustively mention all possibilities.


API functions that take a "point" as input
------------------------------------------

Many API functions take a point as input.
In such a case, you can either pass a single Point object, or 3 coordinates.
For example, a line between two points can be created in both these ways:

* From coordinates:

.. code-block:: python

	x = 1
	y = 7
	z = 3
	point1 = (x, y, z) #tuple with x, y, z
	point2 = [c + 2 for c in point1] #list with translated point1
	trimatic.create_line(point1, point2)

*	From trimatic.Point objects:

.. code-block:: python

	point1 = trimatic.find_point("Point 1") # returns point in object tree (type trimatic.Point)
	point2 = trimatic.find_point("Point 2") # returns point in object tree (type trimatic.Point)
	trimatic.create_line(point1, point2)

Note: For purposes of brevity, the documentation for specific API functions will mention trimatic.
Point as input type and not exhaustively mention all possibilities. 


Keyword arguments
-----------------

Passing arguments to a Python function can be done in 2 ways:

* By using positional arguments. In this case, the order in which arguments are passed determines which argument it is. For example: 

.. code-block:: python

	closest_point = trimatic.compute_closest_point(mypoint, mybox)

* By using keyword arguments, which argument is passed is determined by specifying its name. The order in which they are specified does not matter. For example: 

.. code-block:: python

	closest_point = trimatic.compute_closest_point(part = mybox, point = mypoint)

Using keyword arguments makes your script more robust against API changes.
When a function has many arguments, it will also improve readability.

When a trimatic API function has more than 5 arguments, the function will force the user to use keyword arguments. 
Such functions can be recognized because they will have \*args as their first argument. For example: 

.. code-block:: python
	
	def adaptive_remesh(*args, entities, target_triangle_edge_length = 1.0, preserve_surface_contours = False, local_remesh_parameters = (()), local_growth_rate : float = 25 ):

In the trimatic API, keyword arguments cannot be used for class member functions, such as mypart.find_surface().
For those functions, positional arguments should be used. For example: 

.. code-block:: python
	
	mypart.find_surface("Bottom")


"Remove original" and "Create new part" parameters in GUI
---------------------------------------------------------

Many operations in the 3-matic GUI have parameters like "Remove original" and "Create new part". 
In the trimatic API, we have consciously not added such parameters. 
When working in the GUI, these parameters can save the user from making excessive interactions, this is not valid when scripting. 
When comparing the GUI with the API, you should imagine "Remove Original" = ON and "Create new part" = ON. 
To have the same result as "Remove Original" = OFF, you can use trimatic.duplicate to make a duplicate of the original part before performing the operation. 
To have the same effect as "Create new part" = OFF where you want to add the result to an existing part, you can use trimatic.merge after the operation.


"Create" versus "Compute" methods
---------------------------------

When you compare GUI operations for create point, you will find many different methods. 
In the trimatic API, you will only find one (generic) 

.. code-block:: python
	
	trimatic.create_point((x,y,z))
	
which creates a point based on x,y,z values. 
This function will create a point in the 3-matic GUI and return a trimatic.Point object. 
Next to this, you will find functions like 

.. code-block:: python
	
	cog = trimatic.compute_center_of_gravity(mypart)

This function will only compute and return (x, y, z) coordinates of the center of gravity, but will not create a point in 3-matic GUI. 
This choice was made because in many scripting applications, the computed points are only needed for further calculations. 
When you do want to create a point corresponding to the center of gravity, you can use:

.. code-block:: python
	
	trimatic.create_point(trimatic.compute_center_of_gravity(mypart))


Callback notifications
---------------------------------

Callback notifications allow you to subscribe to a 3-matic event, thus executing the user-defined callback function whenever the corresponding event occurred during 3-matic's operation.
With this feature, you can get active notifications on 3-matic events and create a more efficient workflow for your system updates.
Note that this feature will be relevant mostly for advanced users that write elaborate scripts, who want to obtain maximum efficiency during their script execution.

Notification types are 3-matic events that users can subscribe to through the scripting functions.
There are 4 notification types available in 3-matic:

* obj_created: New object is created.

* obj_deleted: Existing object is deleted.

* obj_label_changed: Existing object is renamed.

* obj_visual_state_changed: Existing object is changed to show/hide.

Users can subscribe, unsubscribe and check subscription status of supported notification types.
Most of the notification types notify users after the event except obj_deleted, which notifies users before the event.
Further details on callback notification functions can be found :ref:`here <callback_notification>`.

.. only:: non_medical

 * Supports only selected APIs listed :download:`here <scripting_functions_with_callback_notifications.pdf>`. 

.. only:: medical

 * Supports only selected APIs listed :download:`here <scripting_functions_with_callback_notifications_medical.pdf>`.

Notes:

* The term “Object” refers to an STL part, analytical point, analytical line, analytical arc, analytical cylinder, analytical cone, analytical plane (datum plane) and analytical sphere only.
* Supports only one subscription per 3-matic event.
* If users resubscribe to a 3-matic event that was subscribed to previously, the original subscription is replaced by the later subscription.
* Users are responsible for ensuring that their callback function is not contained in a workflow that might induce a recursive callback scenario.
* Notification for obj_deleted is sent before the event, and there is no additional handling if the deletion fails later in the operation. 

